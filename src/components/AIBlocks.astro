---
/* Strictly-typed AI blocks to satisfy ts(7006) etc. */
type Strs = string[];
interface Quote { text: string; speaker?: string; time?: string }
interface QA { q: string; a: string }
interface Entity { name: string; url?: string }

type Ai = {
  tldr?: Strs; learn?: Strs; takeaways?: Strs; numbers?: Strs;
  quotes?: Quote[]; faq?: QA[]; entities?: Entity[];
};

const { ai = {}, page = {} } = Astro.props as {
  ai?: Ai;
  page?: Record<string, unknown>;
};

const has = (v: unknown): boolean =>
  Array.isArray(v) ? (v as unknown[]).length > 0 :
  !!(v && typeof v === 'object' && Object.keys(v as Record<string,unknown>).length > 0);
---

<section class="card" aria-labelledby="tldr"><h2 id="tldr">TL;DR</h2>
  {has(ai?.tldr)
    ? <ul>{(ai!.tldr as Strs).map((x: string) => <li>{x}</li>)}</ul>
    : <p class="meta">We’ll populate these bullets as transcripts are finalized.</p>}
</section>

<section class="card" aria-labelledby="learn"><h2 id="learn">What you’ll learn</h2>
  {has(ai?.learn) ? <ul>{(ai!.learn as Strs).map((x: string) => <li>{x}</li>)}</ul> : null}
</section>

<section class="card" aria-labelledby="takeaways"><h2 id="takeaways">Key takeaways</h2>
  {has(ai?.takeaways)
    ? <ul>{(ai!.takeaways as Strs).map((x: string) => <li set:html={x} />)}</ul>
    : null}
</section>

<section class="card" aria-labelledby="numbers"><h2 id="numbers">By the numbers</h2>
  {has(ai?.numbers) ? <ul>{(ai!.numbers as Strs).map((x: string) => <li>{x}</li>)}</ul> : null}
</section>

<section class="card" aria-labelledby="quotes"><h2 id="quotes">Quotes</h2>
  {Array.isArray(ai?.quotes) && ai!.quotes!.length
    ? <div>{(ai!.quotes as Quote[]).map((q: Quote) =>
        <figure>
          <blockquote>“{q.text}”</blockquote>
          <figcaption>— {q.speaker} {q.time && <time datetime={q.time}>{q.time}</time>}</figcaption>
        </figure>
      )}</div>
    : <p class="meta">Add quotes when the transcript is ready.</p>}
</section>

<section class="card" aria-labelledby="faq"><h2 id="faq">FAQ</h2>
  {Array.isArray(ai?.faq) && ai!.faq!.length
    ? <dl>{(ai!.faq as QA[]).map((f: QA) => <><dt>{f.q}</dt><dd>{f.a}</dd></>)}</dl>
    : null}
</section>

<section class="card" aria-labelledby="entities"><h2 id="entities">Entities mentioned</h2>
  {Array.isArray(ai?.entities) && ai!.entities!.length
    ? <ul>{(ai!.entities as Entity[]).map((e: Entity) =>
        <li>{e.url ? <a href={e.url} rel="noopener">{e.name}</a> : e.name}</li>
      )}</ul>
    : null}
</section>
